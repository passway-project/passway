/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a user record */
    get: {
      parameters: {
        query?: never
        header: {
          /** @description ID of user to look up */
          'x-user-id': string
        }
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description User found */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              user?: {
                iv?: string
                keys?: string
                salt?: string
              }
            }
          }
        }
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message?: string
            }
          }
        }
      }
    }
    /** Create or update a user record */
    put: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            /** @description Base 64 encoded, encrypted, public/private key pair. DO NOT provide unencrypted data. */
            encryptedKeys: string
            /** @description User ID */
            id: string
            /** @description Base 64 encoded [initialization vector](https://en.wikipedia.org/wiki/Initialization_vector) that `encryptedKeys` was created with. */
            iv: string
            /** @description Base 64 encoded, unencrypted, public key. */
            publicKey: string
            /** @description Base 64 encoded [salt](https://en.wikipedia.org/wiki/Salt_(cryptography)) string that `encryptedKeys` was created with. */
            salt: string
          }
        }
      }
      responses: {
        /** @description User updated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': Record<string, never>
          }
        }
        /** @description User created */
        201: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': Record<string, never>
          }
        }
        /** @description User not found */
        403: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message?: string
            }
          }
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/session': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Create a session */
    get: {
      parameters: {
        query?: never
        header: {
          /** @description User ID */
          'x-passway-id': string
          /** @description Signed, base 64 version of the string `"!!Passway_Signature_Base!!"` to validate */
          'x-passway-signature': string
        }
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Session created. This response returns a session cookie called `passwaySessionId`. */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': Record<string, never>
          }
        }
        /** @description Signature invalid */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message?: string
            }
          }
        }
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message?: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    /** Delete session */
    delete: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Session deletion success */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              message?: string
            }
          }
        }
      }
    }
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: never
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
